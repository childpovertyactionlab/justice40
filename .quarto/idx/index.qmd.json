{"title":"Justice40 in Dallas County","markdown":{"yaml":{"title":"Justice40 in Dallas County","format":"html"},"headingText":"acs_vars <- load_variables(2022, \"acs5\")","containsRefs":false,"markdown":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(raster)\nlibrary(rasterVis)\nlibrary(ncdf4)\nlibrary(lattice)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\n\n\n# acs_prof <- load_variables(2022, \"acs5/profile\")\n\n# acs_sums <- load_variables(2022, \"acs5/subject\")\n\ncompare <- read_delim(\"tab20_tract20_tract10_natl.txt\", delim = \"|\")\n\n# Poverty 100% vol: S1701_C02_001 / S1701_C01_001\n\n# Child poverty 100% vol: (B17020_003 + B17020_004 + B17020_005) / \n\n# Life expectancy:\n  # see below\n\n# Heat deserts?\n  # see below\n\n# Air pollution?\n\ndallas_co <- get_acs(\"county\",\n                     variables = \"S1701_C02_001\",\n                     year = 2022,\n                     state = \"TX\",\n                     county = \"Dallas\",\n                     geometry = TRUE)\n\n\ndallas <- get_acs(\"place\",\n                  variables = \"S1701_C02_001\",\n                  year = 2022,\n                  state = \"TX\",\n                  geometry = TRUE) %>%\n  filter(GEOID == \"4819000\") %>%\n  sf::st_intersection(dallas_co)\n\n\nacs <- get_acs(\"tract\",\n               variables = c(\"S1701_C02_001\", \"S1701_C01_001\", \n                             \"S1701_C02_002\", \"S1701_C01_002\"),\n               year = 2022,\n               state = \"TX\",\n               county = \"Dallas\",\n               geometry = TRUE) %>%\n  dplyr::select(-moe) %>%\n  pivot_wider(\n    names_from = \"variable\",\n    values_from = \"estimate\"\n  ) %>%\n  mutate(\n    \"poverty\" = S1701_C02_001 / S1701_C01_001,\n    \"child_pov\" = S1701_C02_002 / S1701_C01_002\n    )\n\nread_life_exp <- read_csv(\"cdc_life_expectancy.csv\") %>%\n  filter(State == \"Texas\") %>%\n  filter(County == \"Dallas County, TX\")\n\n\n# LIFE EXP (2010-2015) FROM 2010 TRACTS MAPPED TO 2020 TRACTS USING AREA-WEIGHTED MEAN\n\nlife_exp <- compare %>%\n  filter(GEOID_TRACT_20 %in% acs$GEOID) %>%\n  mutate(\n    `Census Tract Number` =  sprintf(\"%07.2f\", as.numeric(str_remove(NAMELSAD_TRACT_10, \"^Census Tract \")))\n  ) %>%\n  left_join(read_life_exp, by = \"Census Tract Number\") %>%\n  group_by(GEOID_TRACT_20) %>%\n  summarize(\n    life_exp = weighted.mean(`Life Expectancy`, AREALAND_PART, na.rm = TRUE)\n  ) %>%\n  rename(GEOID = GEOID_TRACT_20)\n\n\n\nheat <- readxl::read_excel(\"urban_heat.xlsx\", sheet = 2) %>%\n  rename(heat_effect_F = `urban heat island effect (temperature in degrees F)`) %>%\n  mutate(GEOID = as.character(`census tract number`)) %>%\n  dplyr::select(GEOID, heat_effect_F)\n\n\n# pollution PM2.5 for 2018\n\nncfile <- ncdf4::nc_open('V4NA03_PM25_NA_201801_201812-RH35.nc')\ninput_nc <- 'V4NA03_PM25_NA_201801_201812-RH35.nc'\nvarname <- 'PM25'\n\n# nc2raster <- raster(input_nc,varname = varname,band = 1)\nnc2raster <- stack(input_nc, varname = varname)\n\nmerge <- acs %>%\n  dplyr::select(-c(\"S1701_C02_001\", \"S1701_C01_001\", \"S1701_C02_002\", \"S1701_C01_002\")) %>%\n  left_join(life_exp) %>%\n  left_join(heat)\n\ncentroids <- merge %>%\n  sf::st_centroid() %>%\n  sf::st_transform(centroids, crs = crs(nc2raster)) %>%\n  mutate(PM25 = as.vector(raster::extract(nc2raster, .))) %>%\n  as.data.frame() %>%\n  dplyr::select(GEOID, PM25)\n\ndf <- merge %>%\n  left_join(centroids, by = \"GEOID\") %>%\nmutate(\n    poverty_score = ifelse(is.na(poverty), 0, ntile(poverty, 5)),\n    child_pov_score = ifelse(is.na(child_pov), 0, ntile(child_pov, 5)),\n    life_exp_score = ifelse(is.na(life_exp), 0, 6 - ntile(life_exp, 5)),\n    heat_effect_F_score = ifelse(is.na(heat_effect_F), 0, 6 - ntile(heat_effect_F, 5)),\n    PM25_score = ifelse(is.na(PM25), 0, ntile(PM25, 5))\n  ) %>%\n  rowwise() %>% \n  mutate(\n    data_count = 5 - ((is.na(poverty)) + \n            (is.na(child_pov)) + \n            (is.na(heat_effect_F)) + \n            (is.na(life_exp)) + \n            (is.na(PM25))),\n    total_score = poverty_score + child_pov_score + heat_effect_F_score + life_exp_score + PM25_score,\n    avg_score = (poverty_score + child_pov_score + heat_effect_F_score + life_exp_score + PM25_score) / data_count\n  ) %>% \n  ungroup() %>%\n  mutate(tract = str_split(NAME, \";\", simplify = TRUE)[, 1])\n\n\n# ggplot(df, aes(x = poverty, y = life_exp)) +\n#   geom_point() +  # Scatter plot\n#   geom_smooth(method = \"lm\", se = FALSE) +  # Linear regression line\n#   labs(\n#     title = \"Scatter Plot of Poverty vs. Life Expectancy\",\n#     x = \"Poverty\",\n#     y = \"Life Expectancy\"\n#   ) +\n#   theme_minimal()\n\nbounds <- as.vector(sf::st_bbox(dallas_co))\n\n```\n\n## Severity Score\n\nCalculated by averaging quintile placement across all metrics. Higher score is worse.\n\n```{r avg_score}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorNumeric(colorRamp(c(\"#fff5fb\", \"#d1007d\"), interpolate = \"spline\"), c(1,5))(avg_score),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Severity: \", total_score, \" out of \", data_count * 5),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%\n  addLegend(\"bottomright\", pal = colorNumeric(colorRamp(c(\"#fff5fb\", \"#d1007d\"), interpolate = \"spline\"), c(1,5)),\n            values = ~avg_score,\n            title = \"Average Score\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## Poverty Rate (2018-2022)\n\n```{r poverty}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#e6eefa\", \"#02214f\"), interpolate = \"spline\"), poverty, n = 5)(poverty),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Poverty rate: \", scales::percent(poverty, accuracy = 0.1)),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#e6eefa\", \"#02214f\"), interpolate = \"spline\"), df$poverty, n = 5),\n            values = ~poverty,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## Child Poverty Rate (2018-2022)\n\n```{r child_pov}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#e6eefa\", \"#0457d1\"), interpolate = \"spline\"), child_pov, n = 5)(child_pov),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Child poverty rate: \", scales::percent(child_pov, accuracy = 0.1)),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#e6eefa\", \"#0457d1\"), interpolate = \"spline\"), df$child_pov, n = 5),\n            values = ~child_pov,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## Life Expectancy (2010-2015)\n\n```{r life_exp}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#d5f5dc\", \"#04801f\"), interpolate = \"spline\"), life_exp, n = 5)(life_exp),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Life expectancy: \", round(life_exp, digits = 2), \" years\"),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#d5f5dc\", \"#04801f\"), interpolate = \"spline\"), df$life_exp, n = 5),\n            values = ~life_exp,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## Heat Effect (2023)\n\nSource: ([Climate Central](https://www.climatecentral.org/climate-matters/urban-heat-islands-2023)\n\n```{r heat_effect_F}\n\njittered_df <- df %>%\n  mutate(\n    heat_effect_F_jittered = jitter(heat_effect_F, amount = 0.0001)\n  )\n\nleaflet(data = jittered_df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#f0d3ce\", \"#a61903\"), interpolate = \"spline\"), heat_effect_F_jittered, n = 5)(heat_effect_F_jittered),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Heat effect: \", round(heat_effect_F, digits = 2), \"Â°F\"),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)\n              ) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#f0d3ce\", \"#a61903\"), interpolate = \"spline\"), jittered_df$heat_effect_F_jittered, n = 5),\n            values = ~heat_effect_F_jittered,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## PM 2.5 (2018 Annual Average)\n\n```{r PM25}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#faf4de\", \"#7a6002\"), interpolate = \"spline\"), PM25, n = 5)(PM25),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste(\"PM2.5 level:\", round(PM25, digits = 3), \"Âµg/mÂ³\"),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)\n  ) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#faf4de\", \"#7a6002\"), interpolate = \"spline\"), df$PM25, n = 5),\n            values = ~PM25,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(raster)\nlibrary(rasterVis)\nlibrary(ncdf4)\nlibrary(lattice)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\n\n# acs_vars <- load_variables(2022, \"acs5\")\n\n# acs_prof <- load_variables(2022, \"acs5/profile\")\n\n# acs_sums <- load_variables(2022, \"acs5/subject\")\n\ncompare <- read_delim(\"tab20_tract20_tract10_natl.txt\", delim = \"|\")\n\n# Poverty 100% vol: S1701_C02_001 / S1701_C01_001\n\n# Child poverty 100% vol: (B17020_003 + B17020_004 + B17020_005) / \n\n# Life expectancy:\n  # see below\n\n# Heat deserts?\n  # see below\n\n# Air pollution?\n\ndallas_co <- get_acs(\"county\",\n                     variables = \"S1701_C02_001\",\n                     year = 2022,\n                     state = \"TX\",\n                     county = \"Dallas\",\n                     geometry = TRUE)\n\n\ndallas <- get_acs(\"place\",\n                  variables = \"S1701_C02_001\",\n                  year = 2022,\n                  state = \"TX\",\n                  geometry = TRUE) %>%\n  filter(GEOID == \"4819000\") %>%\n  sf::st_intersection(dallas_co)\n\n\nacs <- get_acs(\"tract\",\n               variables = c(\"S1701_C02_001\", \"S1701_C01_001\", \n                             \"S1701_C02_002\", \"S1701_C01_002\"),\n               year = 2022,\n               state = \"TX\",\n               county = \"Dallas\",\n               geometry = TRUE) %>%\n  dplyr::select(-moe) %>%\n  pivot_wider(\n    names_from = \"variable\",\n    values_from = \"estimate\"\n  ) %>%\n  mutate(\n    \"poverty\" = S1701_C02_001 / S1701_C01_001,\n    \"child_pov\" = S1701_C02_002 / S1701_C01_002\n    )\n\nread_life_exp <- read_csv(\"cdc_life_expectancy.csv\") %>%\n  filter(State == \"Texas\") %>%\n  filter(County == \"Dallas County, TX\")\n\n\n# LIFE EXP (2010-2015) FROM 2010 TRACTS MAPPED TO 2020 TRACTS USING AREA-WEIGHTED MEAN\n\nlife_exp <- compare %>%\n  filter(GEOID_TRACT_20 %in% acs$GEOID) %>%\n  mutate(\n    `Census Tract Number` =  sprintf(\"%07.2f\", as.numeric(str_remove(NAMELSAD_TRACT_10, \"^Census Tract \")))\n  ) %>%\n  left_join(read_life_exp, by = \"Census Tract Number\") %>%\n  group_by(GEOID_TRACT_20) %>%\n  summarize(\n    life_exp = weighted.mean(`Life Expectancy`, AREALAND_PART, na.rm = TRUE)\n  ) %>%\n  rename(GEOID = GEOID_TRACT_20)\n\n\n\nheat <- readxl::read_excel(\"urban_heat.xlsx\", sheet = 2) %>%\n  rename(heat_effect_F = `urban heat island effect (temperature in degrees F)`) %>%\n  mutate(GEOID = as.character(`census tract number`)) %>%\n  dplyr::select(GEOID, heat_effect_F)\n\n\n# pollution PM2.5 for 2018\n\nncfile <- ncdf4::nc_open('V4NA03_PM25_NA_201801_201812-RH35.nc')\ninput_nc <- 'V4NA03_PM25_NA_201801_201812-RH35.nc'\nvarname <- 'PM25'\n\n# nc2raster <- raster(input_nc,varname = varname,band = 1)\nnc2raster <- stack(input_nc, varname = varname)\n\nmerge <- acs %>%\n  dplyr::select(-c(\"S1701_C02_001\", \"S1701_C01_001\", \"S1701_C02_002\", \"S1701_C01_002\")) %>%\n  left_join(life_exp) %>%\n  left_join(heat)\n\ncentroids <- merge %>%\n  sf::st_centroid() %>%\n  sf::st_transform(centroids, crs = crs(nc2raster)) %>%\n  mutate(PM25 = as.vector(raster::extract(nc2raster, .))) %>%\n  as.data.frame() %>%\n  dplyr::select(GEOID, PM25)\n\ndf <- merge %>%\n  left_join(centroids, by = \"GEOID\") %>%\nmutate(\n    poverty_score = ifelse(is.na(poverty), 0, ntile(poverty, 5)),\n    child_pov_score = ifelse(is.na(child_pov), 0, ntile(child_pov, 5)),\n    life_exp_score = ifelse(is.na(life_exp), 0, 6 - ntile(life_exp, 5)),\n    heat_effect_F_score = ifelse(is.na(heat_effect_F), 0, 6 - ntile(heat_effect_F, 5)),\n    PM25_score = ifelse(is.na(PM25), 0, ntile(PM25, 5))\n  ) %>%\n  rowwise() %>% \n  mutate(\n    data_count = 5 - ((is.na(poverty)) + \n            (is.na(child_pov)) + \n            (is.na(heat_effect_F)) + \n            (is.na(life_exp)) + \n            (is.na(PM25))),\n    total_score = poverty_score + child_pov_score + heat_effect_F_score + life_exp_score + PM25_score,\n    avg_score = (poverty_score + child_pov_score + heat_effect_F_score + life_exp_score + PM25_score) / data_count\n  ) %>% \n  ungroup() %>%\n  mutate(tract = str_split(NAME, \";\", simplify = TRUE)[, 1])\n\n\n# ggplot(df, aes(x = poverty, y = life_exp)) +\n#   geom_point() +  # Scatter plot\n#   geom_smooth(method = \"lm\", se = FALSE) +  # Linear regression line\n#   labs(\n#     title = \"Scatter Plot of Poverty vs. Life Expectancy\",\n#     x = \"Poverty\",\n#     y = \"Life Expectancy\"\n#   ) +\n#   theme_minimal()\n\nbounds <- as.vector(sf::st_bbox(dallas_co))\n\n```\n\n## Severity Score\n\nCalculated by averaging quintile placement across all metrics. Higher score is worse.\n\n```{r avg_score}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorNumeric(colorRamp(c(\"#fff5fb\", \"#d1007d\"), interpolate = \"spline\"), c(1,5))(avg_score),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Severity: \", total_score, \" out of \", data_count * 5),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%\n  addLegend(\"bottomright\", pal = colorNumeric(colorRamp(c(\"#fff5fb\", \"#d1007d\"), interpolate = \"spline\"), c(1,5)),\n            values = ~avg_score,\n            title = \"Average Score\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## Poverty Rate (2018-2022)\n\n```{r poverty}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#e6eefa\", \"#02214f\"), interpolate = \"spline\"), poverty, n = 5)(poverty),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Poverty rate: \", scales::percent(poverty, accuracy = 0.1)),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#e6eefa\", \"#02214f\"), interpolate = \"spline\"), df$poverty, n = 5),\n            values = ~poverty,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## Child Poverty Rate (2018-2022)\n\n```{r child_pov}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#e6eefa\", \"#0457d1\"), interpolate = \"spline\"), child_pov, n = 5)(child_pov),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Child poverty rate: \", scales::percent(child_pov, accuracy = 0.1)),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#e6eefa\", \"#0457d1\"), interpolate = \"spline\"), df$child_pov, n = 5),\n            values = ~child_pov,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## Life Expectancy (2010-2015)\n\n```{r life_exp}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#d5f5dc\", \"#04801f\"), interpolate = \"spline\"), life_exp, n = 5)(life_exp),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Life expectancy: \", round(life_exp, digits = 2), \" years\"),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#d5f5dc\", \"#04801f\"), interpolate = \"spline\"), df$life_exp, n = 5),\n            values = ~life_exp,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## Heat Effect (2023)\n\nSource: ([Climate Central](https://www.climatecentral.org/climate-matters/urban-heat-islands-2023)\n\n```{r heat_effect_F}\n\njittered_df <- df %>%\n  mutate(\n    heat_effect_F_jittered = jitter(heat_effect_F, amount = 0.0001)\n  )\n\nleaflet(data = jittered_df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#f0d3ce\", \"#a61903\"), interpolate = \"spline\"), heat_effect_F_jittered, n = 5)(heat_effect_F_jittered),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste0(\"Heat effect: \", round(heat_effect_F, digits = 2), \"Â°F\"),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)\n              ) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#f0d3ce\", \"#a61903\"), interpolate = \"spline\"), jittered_df$heat_effect_F_jittered, n = 5),\n            values = ~heat_effect_F_jittered,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n\n## PM 2.5 (2018 Annual Average)\n\n```{r PM25}\n\nleaflet(data = df) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~colorQuantile(colorRamp(c(\"#faf4de\", \"#7a6002\"), interpolate = \"spline\"), PM25, n = 5)(PM25),\n              fillOpacity = 0.7, weight = 1,\n              color = \"white\", dashArray = \"3\",\n              label = ~paste(\"PM2.5 level:\", round(PM25, digits = 3), \"Âµg/mÂ³\"),\n              labelOptions = labelOptions(direction = 'auto', html = TRUE)\n  ) %>%\n  addLegend(\"bottomright\", pal = colorQuantile(colorRamp(c(\"#faf4de\", \"#7a6002\"), interpolate = \"spline\"), df$PM25, n = 5),\n            values = ~PM25,\n            title = \"Quartile\",\n            opacity = 1) %>%\n  addPolygons(\n    data = dallas,\n    fillColor = \"#333333\",\n    fillOpacity = 0.1, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4])\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":9,"fig-height":7,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"www/web_report.scss","toc-title":"Contents","toc-location":"right","anchor-sections":false,"code-summary":"Reveal Code","code-copy":"hover","smooth-scroll":true,"grid":{"sidebar-width":"250px","body-width":"900px","margin-width":"300px"},"code-block-bg":true,"code-block-border-left":"#008097","message":false,"title":"Justice40 in Dallas County"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}